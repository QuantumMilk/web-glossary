{
    "terms": [
      {
        "name": "Микросервисная архитектура",
        "definition": "Подход к разработке, при котором приложение разбивается на набор независимых сервисов, каждый из которых выполняет свою узкую задачу и взаимодействует с другими по сети.",
        "source": "Martin Fowler"
      },
      {
        "name": "Сервис-ориентированная архитектура (SOA)",
        "definition": "Стиль проектирования ПО, в котором функции представлены в виде независимых сервисов с хорошо определёнными интерфейсами, позволяющими им взаимодействовать между собой.",
        "source": "OASIS SOA Reference Model"
      },
      {
        "name": "Docker",
        "definition": "Открытая платформа для создания, доставки и запуска приложений в контейнерах.",
        "source": "Docker Docs"
      },
      {
        "name": "Kubernetes",
        "definition": "Открытая система для автоматизации развертывания, масштабирования и управления контейнеризованными приложениями.",
        "source": "Kubernetes Docs"
      },
      {
        "name": "Service Discovery",
        "definition": "Механизм автоматического обнаружения и регистрации сервисов, чтобы другие микросервисы могли их находить и вызывать.",
        "source": "Netflix Tech Blog"
      },
      {
        "name": "API Gateway",
        "definition": "Точка входа для всех внешних запросов, которая маршрутизирует их к соответствующим микросервисам и может обеспечивать безопасность и балансировку нагрузки.",
        "source": "Nginx Docs"
      },
      {
        "name": "Service Mesh",
        "definition": "Инфраструктурный слой для управления сетевыми взаимодействиями между сервисами, предоставляющий механизмы маршрутизации, наблюдаемости и безопасности.",
        "source": "Istio Docs"
      },
      {
        "name": "Circuit Breaker",
        "definition": "Шаблон, защищающий сервисы от каскадных сбоев путём отслеживания отказов и временного блокирования вызовов к проблемным сервисам.",
        "source": "Netflix OSS"
      },
      {
        "name": "Мониторинг",
        "definition": "Система непрерывного сбора и анализа метрик (нагрузка, задержки, ошибки) для отслеживания состояния микросервисов.",
        "source": "Prometheus Docs"
      },
      {
        "name": "Логирование",
        "definition": "Процесс сохранения и анализа логов (журналов событий) сервисов для диагностики и аудита.",
        "source": "ELK Stack Docs"
      },
      {
        "name": "Событийная архитектура",
        "definition": "Подход, при котором взаимодействие между сервисами происходит за счёт передачи и обработки событий, а не прямых запросов.",
        "source": "Confluent Blog"
      },
      {
        "name": "Message Broker",
        "definition": "Промежуточное программное обеспечение (например, RabbitMQ, Kafka), которое принимает и распределяет сообщения между сервисами.",
        "source": "Apache Kafka Docs"
      },
      {
        "name": "REST",
        "definition": "Стиль архитектуры веб-сервисов, основанный на протоколе HTTP и использовании CRUD-операций для работы с ресурсами.",
        "source": "Fielding Dissertation"
      },
      {
        "name": "gRPC",
        "definition": "Высокопроизводительный RPC-фреймворк от Google, основанный на HTTP/2 и протоколе Protocol Buffers.",
        "source": "gRPC.io"
      },
      {
        "name": "CI/CD",
        "definition": "Набор практик непрерывной интеграции и непрерывной доставки кода, позволяющий автоматически собирать, тестировать и развертывать изменения.",
        "source": "Jez Humble"
      },
      {
        "name": "DevOps",
        "definition": "Культурная и организационная практика, объединяющая разработчиков и специалистов по эксплуатации для ускорения и улучшения поставки ПО.",
        "source": "AWS"
      },
      {
        "name": "Образ Docker",
        "definition": "Шаблон, содержащий всё необходимое для запуска приложения в контейнере, включая код, зависимости и конфигурации.",
        "source": "Docker Docs"
      },
      {
        "name": "Контейнер",
        "definition": "Изолированная среда выполнения, созданная на основе образа Docker (или другого инструмента), в которой работает микросервис со всеми необходимыми ему ресурсами.",
        "source": "Open Container Initiative"
      },
      {
        "name": "Cloud Native",
        "definition": "Подход к созданию и запуску приложений, ориентированный на использование облачных платформ, микросервисов и контейнеризации для повышения гибкости и масштабируемости.",
        "source": "Cloud Native Computing Foundation"
      },
      {
        "name": "Горизонтальное масштабирование",
        "definition": "Способ увеличения пропускной способности системы за счёт добавления дополнительных экземпляров сервисов (машин, контейнеров), а не наращивания мощности отдельного узла.",
        "source": "Microsoft Docs"
      }
    ],
    "relationships": [
      {
        "source_term_id": 1,
        "target_term_id": 2,
        "relation_type": "эволюционировала из"
      },
      {
        "source_term_id": 1,
        "target_term_id": 6,
        "relation_type": "использует"
      },
      {
        "source_term_id": 1,
        "target_term_id": 3,
        "relation_type": "разворачивается_в"
      },
      {
        "source_term_id": 3,
        "target_term_id": 4,
        "relation_type": "оркестрируется_через"
      },
      {
        "source_term_id": 5,
        "target_term_id": 1,
        "relation_type": "способствует"
      },
      {
        "source_term_id": 7,
        "target_term_id": 1,
        "relation_type": "упрощает_взаимодействие"
      },
      {
        "source_term_id": 8,
        "target_term_id": 1,
        "relation_type": "защищает"
      },
      {
        "source_term_id": 15,
        "target_term_id": 16,
        "relation_type": "часть"
      },
      {
        "source_term_id": 17,
        "target_term_id": 3,
        "relation_type": "для_контейнеризации"
      },
      {
        "source_term_id": 14,
        "target_term_id": 1,
        "relation_type": "используется_для_RPC"
      }
    ]
  }
  